{
  "_args": [
    [
      {
        "raw": "walkdir@^0.3.2",
        "scope": null,
        "escapedName": "walkdir",
        "name": "walkdir",
        "rawSpec": "^0.3.2",
        "spec": ">=0.3.2 <0.4.0",
        "type": "range"
      },
      "/home/faruq/final-project-code/seecow/sensor_server/node_modules/google-gax"
    ]
  ],
  "_from": "walkdir@^0.3.2",
  "_hasShrinkwrap": false,
  "_id": "walkdir@0.3.2",
  "_location": "/walkdir",
  "_nodeVersion": "10.7.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/walkdir_0.3.2_1549581328014_0.9676674079091445"
  },
  "_npmUser": {
    "name": "soldair",
    "email": "soldair@gmail.com"
  },
  "_npmVersion": "6.7.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "walkdir@^0.3.2",
    "scope": null,
    "escapedName": "walkdir",
    "name": "walkdir",
    "rawSpec": "^0.3.2",
    "spec": ">=0.3.2 <0.4.0",
    "type": "range"
  },
  "_requiredBy": [
    "/google-gax"
  ],
  "_resolved": "https://registry.npmjs.org/walkdir/-/walkdir-0.3.2.tgz",
  "_shasum": "ac8437a288c295656848ebc19981ebc677a5f590",
  "_shrinkwrap": null,
  "_spec": "walkdir@^0.3.2",
  "_where": "/home/faruq/final-project-code/seecow/sensor_server/node_modules/google-gax",
  "author": {
    "name": "Ryan Day",
    "email": "soldair@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/soldair/node-walkdir/issues"
  },
  "contributors": [
    {
      "name": "tjfontaine"
    }
  ],
  "dependencies": {},
  "description": "Find files simply. Walks a directory tree emitting events based on what it finds. Presents a familiar callback/emitter/a+sync interface. Walk a tree of any depth.",
  "devDependencies": {
    "@types/node": "^10.12.21",
    "tape": "^4.0.0",
    "typescript": "^3.3.1"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-0Twghia4Z5wDGDYWURlhZmI47GvERMCsXIu0QZWVVZyW9ZjpbbZvD9Zy9M6cWiQQRRbAcYajIyKNavaZZDt1Uw==",
    "shasum": "ac8437a288c295656848ebc19981ebc677a5f590",
    "tarball": "https://registry.npmjs.org/walkdir/-/walkdir-0.3.2.tgz",
    "fileCount": 42,
    "unpackedSize": 41050,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcXLwQCRA9TVsSAnZWagAA8U8P/2Blysgy/43z9P8bOKlQ\nGCePPU+pyxAV/QUFzKDdp7lUY/IanCi59P1ZqD2hAYfNorCNYcl4VXuLQaw/\n91GL75nIorsIde51luUfksrvdHtBCgGHgMGBd7kuMtf+HQRbaLD8gOURGb+R\nkGJ6Wj+81jRF+X1RSUM9hOBsPGjwdNN71t7co7/VA3+EL2TUJQ70albHwFtf\nKbCwCR8ctwwFCAWuixPGX6oOaFSJGP5ubatKVusHSIIyxvMhFZswr4YyrDWI\nVlqgJR9GTRReHnIwV3QsBHm8madtWEBO1JbcVCVUdi6ejH4qsbq03lLjPYDe\nyzi+uxM5PLKD7aFaOuh32fbvf7fvdGqy2eNNFnSYWS9vY3yybJGGtmyeS3WZ\n4WJYMLnXCgGx9HWrT3oY6jK5IE2iZPIrGIKvXcxC2e0URadxhrWdlHMd+2KM\nwfgflYgPhb46VKCeWxH/Kmx4WkDlwd4DNpXpFXa9pMQ6zPkLIIXPGXplDdhz\nuH5GwV7hM0MQenrZ3wDHRbCBHCFHc+/Hz6jURhljqTfXCATsVTLq3JMpdN+s\nQb7SnXdBt2+bTYByuWI617QmOBrdQiBn9v90y+WZbJt2Uyk/VT//hwe3Pg8c\nQvSj4Yj2PjXnsZ102sPYxlW73kMWYkBs2a6GKH4XSAJjiM71KPRH8JhrdokL\nZ40/\r\n=Bw0S\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "engines": {
    "node": ">=6.0.0"
  },
  "gitHead": "7c1b0d4bdf6baccce5ffbc2b3713fd42d74ba3e7",
  "homepage": "http://github.com/soldair/node-walkdir",
  "keywords": [
    "find",
    "walk",
    "tree",
    "files",
    "fs"
  ],
  "license": "MIT",
  "main": "./walkdir.js",
  "maintainers": [
    {
      "name": "soldair",
      "email": "soldair@gmail.com"
    }
  ],
  "name": "walkdir",
  "optionalDependencies": {},
  "readme": "[![Build Status](https://secure.travis-ci.org/soldair/node-walkdir.png)](http://travis-ci.org/soldair/node-walkdir)\n \n## walkdir\n\nFind files. Walks a directory tree emitting events based on what it finds. Presents a familliar callback/emitter/sync interface. Walk a tree of any depth. This is a performant option any pull requests to make it more so will be taken into consderation.. \n\n## Example\n\n```js\n\nvar walk = require('walkdir');\n\n//async with path callback \n\nwalk('../', function(path, stat) {\n  console.log('found: ', path);\n});\n\n//use async emitter to capture more events\n\nvar emitter = walk('../');\n\nemitter.on('file', function(filename, stat) {\n  console.log('file from emitter: ', filename);\n});\n\n\n//sync with callback\n\nwalk.sync('../', function(path, stat) {\n  console.log('found sync:', path);\n});\n\n//sync just need paths\n\nvar paths = walk.sync('../');\nconsole.log('found paths sync: ', paths);\n\n// async await/promise!\nlet result = await walk.async('../',{return_object:true})\n//result['path'] = {statObject}\n\n```\n\n## install\n\n\tnpm install walkdir\n\n## arguments\n\nwalkdir(path, [options], [callback])\nwalkdir.sync(path, [options], [callback]);\n\n- path\n  - the starting point of your directory walk\n\n- options. supported options are\n  - general\n\n```js\n{\n  /**\n  * follow symlinks. default FALSE\n  */\n  \"follow_symlinks\"?: boolean,\n  /**\n    * only go one level deep. convenience param.\n    */ \n  \"no_recurse\"?: boolean,\n  /**\n    * only travel to max depth. emits an error if hit.\n    */\n  \"max_depth\"?: number,\n  /**\n    * on filesystems where inodes are not unique like windows (or perhaps hardlinks) some files may not be emitted due to inode collision.\n    * turning off this behavior may be required but at the same time may lead to hitting max_depth via link loop.\n    */\n  \"track_inodes\"?: boolean;\n  /**\n    * make this syncronous. the same as calling walkdir.sync\n    */\n  \"sync\"?:boolean,\n  /**\n    * return an object of {path:stat} instead of just the resolved path names\n    */\n  \"return_object\"?: boolean,\n  /**\n    * dont build up an internal list or object of all of the paths. this can be an important optimization for listing HUGE trees.\n    */\n  \"no_return\"?: boolean,\n  /**\n    * filter. filter an array of paths from readdir\n    */\n  \"filter\"?:(directory:string,files:string[])=>string[]|Promise<string[]>,\n  /**\n    *  pass in a custom fs object like gracfeful-fs\n    *  needs stat, lstat, readdir, readlink and sync verisons if you use sync:true\n    */\n  \"fs\"?:any,\n  /*** \n   * default True. if false this will use stat insteqad of lstat and not find links at all.\n   */\n  \"find_links?\":boolean,\n}\n```\n\n  - walkdir.sync/walkdir.async only\n\n\t```js\n\t{\n\t  \"return_object\": false, // if true the sync return will be in {path:stat} format instead of [path,path,...]\n\t  \"no_return\": false, // if true null will be returned and no array or object will be created with found paths. useful for large listings\n\t}\n\t```\n\n- callback\n  - this is bound to the path event of the emitter. its optional in all cases.\n\n\t```js\n\tcallback(path, stat)\n\t```\n\n## events\n\nnon error type events are emitted with (path,stat). stat is an instanceof fs.Stats\n\n### path\nfired for everything\n\n### file\nfired only for regular files\n\n### directory\nfired only for directories\n\n### link\nfired when a symbolic link is found\n\n### end\nfired when the entire tree has been read and emitted.\n\n### socket\nfired when a socket descriptor is found\n\n### fifo\nfired when a fifo is found\n\n### characterdevice\nfired when a character device is found\n\n### blockdevice\nfired when a block device is found\n\n### targetdirectory\nfired for the stat of the path you provided as the first argument. is is only fired if it is a directory.\n\n### empty\nfired for empty directory\n\n## error events\nerror type events are emitted with (path,error). error being the error object returned from an fs call or other opperation.\n\n### error\nif the target path cannot be read an error event is emitted. this is the only failure case.\n\n### fail\nwhen stat or read fails on a path somewhere in the walk and it is not your target path you get a fail event instead of error.\nThis is handy if you want to find places you dont have access too.\n\n## notes\nthe async emitter returned supports 3 methods\n\n###end\n  stop a walk in progress\n\n###pause\n  pause the walk. no more events will be emitted until resume\n\n###resume\n  resume the walk\n\n### ignore(path or array of paths)\n  will not traverse these directories. may be called in the path event handler to ignore dynamically. \n  ```js\n  var walk = require('walkdir');\n  var p = require('path');\n  walk('/', function(path, stat) {\n    // ignore all .git directories.\n    if (p.basename(path) === '.git') {\n      this.ignore(path)\n    }\n  })\n  ```\n\n### cancel a walk in progress\n  ```js\n  //cancel a walk in progress within callback.\n\n  var walk = require('walkdir');\n  walk('../', function(path, stat) {\n    this.end();\n  });\n\n  //cancel a walk in progress with emitter handle\n  var walk = require('walkdir');\n  var emitter = walk('../');\n\n  doSomethingAsync(function() {\n    emitter.end();\n  })\n  ```\n\n## thanks\nthanks to substack. the interface for this module is based off of node-findit\n\n## contributing\nsee `CONTRIBUTING.md` for guidelines. this is an open opensource project.\n\n",
  "readmeFilename": "readme.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/soldair/node-walkdir.git"
  },
  "scripts": {
    "test": "tape test/*.js && npm run ts",
    "ts": "tsc --noEmit test.ts"
  },
  "version": "0.3.2"
}
