{
  "_args": [
    [
      {
        "raw": "teeny-request@^3.11.3",
        "scope": null,
        "escapedName": "teeny-request",
        "name": "teeny-request",
        "rawSpec": "^3.11.3",
        "spec": ">=3.11.3 <4.0.0",
        "type": "range"
      },
      "/home/faruq/final-project-code/seecow/sensor_server/node_modules/@google-cloud/storage"
    ]
  ],
  "_from": "teeny-request@^3.11.3",
  "_hasShrinkwrap": false,
  "_id": "teeny-request@3.11.3",
  "_location": "/teeny-request",
  "_nodeVersion": "10.12.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/teeny-request_3.11.3_1543537874005_0.24730574666479965"
  },
  "_npmUser": {
    "name": "kinwa91",
    "email": "kinwa91@msn.com"
  },
  "_npmVersion": "6.4.1",
  "_phantomChildren": {},
  "_requested": {
    "raw": "teeny-request@^3.11.3",
    "scope": null,
    "escapedName": "teeny-request",
    "name": "teeny-request",
    "rawSpec": "^3.11.3",
    "spec": ">=3.11.3 <4.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/@google-cloud/storage"
  ],
  "_resolved": "https://registry.npmjs.org/teeny-request/-/teeny-request-3.11.3.tgz",
  "_shasum": "335c629f7645e5d6599362df2f3230c4cbc23a55",
  "_shrinkwrap": null,
  "_spec": "teeny-request@^3.11.3",
  "_where": "/home/faruq/final-project-code/seecow/sensor_server/node_modules/@google-cloud/storage",
  "author": {
    "name": "fhinkel"
  },
  "bugs": {
    "url": "https://github.com/fhinkel/teeny-request/issues"
  },
  "dependencies": {
    "https-proxy-agent": "^2.2.1",
    "node-fetch": "^2.2.0",
    "uuid": "^3.3.2"
  },
  "description": "Like request, but smaller.",
  "devDependencies": {
    "@types/mocha": "^5.2.5",
    "@types/nock": "^9.3.0",
    "@types/node-fetch": "^2.1.2",
    "@types/request": "^2.47.1",
    "@types/uuid": "^3.4.4",
    "codecov": "^3.1.0",
    "gts": "^0.9.0",
    "mocha": "^5.2.0",
    "nock": "^10.0.2",
    "nyc": "^13.1.0",
    "typescript": "^3.0.1"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-CKncqSF7sH6p4rzCgkb/z/Pcos5efl0DmolzvlqRQUNcpRIruOhY9+T1FsIlyEbfWd7MsFpodROOwHYh2BaXzw==",
    "shasum": "335c629f7645e5d6599362df2f3230c4cbc23a55",
    "tarball": "https://registry.npmjs.org/teeny-request/-/teeny-request-3.11.3.tgz",
    "fileCount": 6,
    "unpackedSize": 32563,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcAITSCRA9TVsSAnZWagAAr64P/0Hjt2YgKF8z2ZGTcWmr\neVoMSqvn2qeLbktWkGvu5dipT6I27BHRz6Kb4k7+DLNEe1nDgGAJqduQtn5x\nVqy6cnNq5XzCFsPzhP7+tsjZHauPBDEK2VuuWEu4ph2Sb4Ec28mQQYOLEW/C\ns04id8tOr6nXKEa94NhTPqZikfkQ17vlJTcDzfnKXb/LUwEczFM44/saMdy6\nc5+Eu4VCuP9DTIyFfRbKesrLTjfRtgLTp2n2dtjivapk3dhnFFS4uYr0Oo4+\nOeN/NjWBBqn+ErgAeTFZ/u8Ab7VElGCKaQxor/Jv4VsxhaudChzVO8tN4gES\nGD8c55oQzSjGx5yb+mOwF/9SVaiwGaDJVzBwbkFE4JU0sXWXPsQAm3JtrWO+\nl01ZOsdjX6t1qbFZBhItcOfxJuM636lsl2Yua0gV5qav1Qlc6/PRA0zPTVK+\nGgL4L4TXARPMxkV6/FW1WvCsqFVXpx3pXKwL91sA+KaSunb9fOXy5R17CAFM\nGQc1kbKarRB1/iesKqFzQqTHX0cYanljERr7VmmeOzN4Hg/R1ZAM5YA/Xpvc\nBAxgA6jy4Tz7iMkK2secdPa0HcNLZ1hguwfpU01A6I7CRwW3fe3uvDX29mTt\nzy0aKn15RPdvH56ySrJI8HvmR4DZtSIzvSclH+Hkuk9wONnziRrJAjCt1VKY\nvFId\r\n=+Lvn\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "files": [
    "build/src",
    "LICENSE"
  ],
  "gitHead": "3ceccda1206b11fe300661f3de96414a1ce057e1",
  "homepage": "https://github.com/fhinkel/teeny-request#readme",
  "keywords": [
    "request",
    "node-fetch",
    "fetch"
  ],
  "license": "Apache-2.0",
  "main": "./build/src/index.js",
  "maintainers": [
    {
      "name": "fhinkel",
      "email": "fhinkel@vt.edu"
    },
    {
      "name": "justinbeckwith",
      "email": "justin.beckwith@gmail.com"
    },
    {
      "name": "kinwa91",
      "email": "kinwa91@msn.com"
    }
  ],
  "name": "teeny-request",
  "nyc": {
    "exclude": [
      "build/test"
    ]
  },
  "optionalDependencies": {},
  "readme": "[![Build Status](https://travis-ci.org/fhinkel/teeny-request.svg?branch=master)](https://travis-ci.org/fhinkel/teeny-request)\n\n# teeny-request \n\nLike `request`, but much smaller - and with less options. Uses `node-fetch` under the hood. \nPop it in where you would use `request`. Improves load and parse time of modules. \n\n```js\nconst request = require('teeny-request').teenyRequest;\n\nrequest({uri: 'http://ip.jsontest.com/'}, function (error, response, body) {\n  console.log('error:', error); // Print the error if one occurred\n  console.log('statusCode:', response && response.statusCode); // Print the response status code if a response was received\n  console.log('body:', body); // Print the JSON.\n});\n```\n\nFor TypeScript, you can use `@types/request`. \n\n```ts\nimport {teenyRequest as request} from 'teeny-request';\nimport r as * from 'request'; // Only for type declarations\n\nrequest({uri: 'http://ip.jsontest.com/'}, (error: any, response: r.Response, body: any) => {\n  console.log('error:', error); // Print the error if one occurred\n  console.log('statusCode:', response && response.statusCode); // Print the response status code if a response was received\n  console.log('body:', body); // Print the JSON.\n});\n```\n\n\n\n## teenyRequest(options, callback)\n\nOptions are limited to the following \n\n* uri\n* method, default GET\n* headers\n* json\n* qs\n* useQuerystring\n* timeout in ms\n* gzip\n* proxy\n\n```ts\nrequest({uri:'http://service.com/upload', method:'POST', json: {key:'value'}}, function(err,httpResponse,body){ /* ... */ })\n```\n\nThe callback argument gets 3 arguments:\n\n * An error when applicable (usually from http.ClientRequest object)\n * An response object with statusCode, a statusMessage, and a body\n * The third is the response body (JSON object)\n\n## defaults(options)\n\nSet default options for every `teenyRequest` call.\n\n```ts\nlet defaultRequest = teenyRequest.defaults({timeout: 60000});\n      defaultRequest({uri: 'http://ip.jsontest.com/'}, function (error, response, body) {\n            assert.ifError(error);\n            assert.strictEqual(response.statusCode, 200);\n            console.log(body.ip);\n            assert.notEqual(body.ip, null);\n            \n            done();\n        });\n```        \n\n## Proxy environment variables\nIf environment variables `HTTP_PROXY` or `HTTPS_PROXY` are set, they are respected. `NO_PROXY` is currently not implemented.\n\n## Building with Webpack 4+\nSince 4.0.0, Webpack uses `javascript/esm` for `.mjs` files which handles ESM more strictly compared to `javascript/auto`. If you get the error `Can't import the named export 'PassThrough' from non EcmaScript module`, please add the following to your Webpack config:\n\n```js\n{\n    test: /\\.mjs$/,\n    type: 'javascript/auto',\n},\n```\n\n## Motivation\n`request` has a ton of options and features and is accordingly large. Requiering a module incurs load and parse time. For\n`request`, that is around 600ms.\n\n![Load time of request measured with require-so-slow](https://user-images.githubusercontent.com/101553/44694187-20357700-aa3a-11e8-9116-b8ae794cbc27.png)\n\n`teeny-request` doesn't have any of the bells and whistles that `request` has, but is so much faster to load. If startup time is an issue and you don't need much beyong a basic GET and POST, you can use `teeny-request`.\n\n## Thanks\nSpecial thanks to [billyjacobson](https://github.com/billyjacobson) for suggesting the name. Please report all bugs to them. Just kidding. Please open issues.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/fhinkel/teeny-request.git"
  },
  "scripts": {
    "check": "gts check",
    "clean": "gts clean",
    "compile": "tsc -p .",
    "coverage": "nyc report --reporter=json && codecov -f coverage/*.json",
    "fix": "gts fix",
    "posttest": "npm run check",
    "prepare": "npm run compile",
    "pretest": "npm run compile",
    "test": "nyc mocha build/test"
  },
  "types": "./build/src/index.d.ts",
  "version": "3.11.3"
}
