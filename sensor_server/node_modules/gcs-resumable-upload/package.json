{
  "_args": [
    [
      {
        "raw": "gcs-resumable-upload@^1.0.0",
        "scope": null,
        "escapedName": "gcs-resumable-upload",
        "name": "gcs-resumable-upload",
        "rawSpec": "^1.0.0",
        "spec": ">=1.0.0 <2.0.0",
        "type": "range"
      },
      "/home/faruq/final-project-code/seecow/sensor_server/node_modules/@google-cloud/storage"
    ]
  ],
  "_from": "gcs-resumable-upload@^1.0.0",
  "_hasShrinkwrap": false,
  "_id": "gcs-resumable-upload@1.0.0",
  "_location": "/gcs-resumable-upload",
  "_nodeVersion": "8.15.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/gcs-resumable-upload_1.0.0_1551366378474_0.5592652734253316"
  },
  "_npmUser": {
    "name": "google-node-team",
    "email": "node-team-npm@google.com"
  },
  "_npmVersion": "6.4.1",
  "_phantomChildren": {},
  "_requested": {
    "raw": "gcs-resumable-upload@^1.0.0",
    "scope": null,
    "escapedName": "gcs-resumable-upload",
    "name": "gcs-resumable-upload",
    "rawSpec": "^1.0.0",
    "spec": ">=1.0.0 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/@google-cloud/storage"
  ],
  "_resolved": "https://registry.npmjs.org/gcs-resumable-upload/-/gcs-resumable-upload-1.0.0.tgz",
  "_shasum": "cb50b5d4151aa698897a6a555db52af9df7c90f4",
  "_shrinkwrap": null,
  "_spec": "gcs-resumable-upload@^1.0.0",
  "_where": "/home/faruq/final-project-code/seecow/sensor_server/node_modules/@google-cloud/storage",
  "author": {
    "name": "Stephen Sawchuk",
    "email": "sawchuk@gmail.com"
  },
  "bin": {
    "gcs-upload": "build/src/cli.js"
  },
  "bugs": {
    "url": "https://github.com/googleapis/gcs-resumable-upload/issues"
  },
  "dependencies": {
    "abort-controller": "^2.0.2",
    "configstore": "^4.0.0",
    "gaxios": "^1.5.0",
    "google-auth-library": "^3.0.0",
    "pumpify": "^1.5.1",
    "stream-events": "^1.0.4"
  },
  "description": "Upload a file to Google Cloud Storage with built-in resumable behavior",
  "devDependencies": {
    "@compodoc/compodoc": "^1.1.7",
    "@types/configstore": "^4.0.0",
    "@types/is-stream": "^1.1.0",
    "@types/mocha": "^5.2.1",
    "@types/mockery": "^1.4.29",
    "@types/nock": "^9.1.3",
    "@types/node": "^10.3.0",
    "@types/pumpify": "^1.4.1",
    "@types/request": "^2.47.0",
    "@types/through2": "^2.0.33",
    "assert-rejects": "^1.0.0",
    "codecov": "^3.0.4",
    "gts": "^0.9.0",
    "intelli-espower-loader": "^1.0.1",
    "is-stream": "^1.1.0",
    "linkinator": "^1.1.2",
    "mocha": "^6.0.0",
    "mockery": "^2.1.0",
    "nock": "^10.0.0",
    "nyc": "^13.0.0",
    "source-map-support": "^0.5.6",
    "through2": "^3.0.0",
    "typescript": "~3.3.0"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-InuVkmj7srAb64w/vSaCU162jk7p4UHmibvfFjT1opO1tiK8Yy88/BeEYn2bCVMv6LH0Sw29L70ejG6oPeq8Ig==",
    "shasum": "cb50b5d4151aa698897a6a555db52af9df7c90f4",
    "tarball": "https://registry.npmjs.org/gcs-resumable-upload/-/gcs-resumable-upload-1.0.0.tgz",
    "fileCount": 10,
    "unpackedSize": 50856,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcd/jtCRA9TVsSAnZWagAAd5IP/jj0UWvMLUE5OUdlYBJh\nE1HnrbGSISbv7j7vn6rPuSS/SkSv8cnGzO5FQJtnh4IwPzJGLQaZcp737K2L\n/fVf/eX7rDcPLq17kZeovBL4rkiSXjU5UV5x9iY/gw6/I4GwZigQ5bpyF7oq\nnWZagtJPvU09CeI43TgYkiZe/CGSVEWHm2haqzcou1LkKTWTCdAkavbVv9Tp\nCUKCNTXHb3+F5cdAzZ6kWc/G7AWn7nGH59zPKo0Qgk9T2Rje0VuwkcJt7cha\n50THCrLTx/GLZafUIepyrk9EvLMe0qrEFNn7ICRD/tSx5b0hVnEbPRZP6Pi3\npaCt6Ot36AolPf2iQ8GIBm/OMvEGVtbIso2SKeNIG/+bgH2m8h0wYFgVpfqx\niBHVFK1H+y65KCkwwVV+UYdXzG5gAA01qSWJavQ+hy1SKwwO1uIZjWx+T05W\nkfjpS604La6m1CdP6eQwMuaFlStoA5NlYYVfV7MyJ1psbcXQEduiGWbS6tWm\nLIe5mojrFwJTN0QZiZzULQPq890IayGPYBU7BhM5CTjXFgO1siyicf9daz00\nMQW8MHM03hBaj/3WRyxa/h/TxhbbIOMPx+AtCuC9OpyhFqlt7S8qjSEoYHh8\nEQjKJjpA2b/+1TCm6Gl31ZhCDzwEukKrr/1j5TzXUPydjkvbiwQ/dksQ2mLE\nKtWH\r\n=wWzo\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "engines": {
    "node": ">=6"
  },
  "files": [
    "build/src"
  ],
  "gitHead": "20f9d5b4a0aee6e617cbc51fa63baf2d6f7d5811",
  "homepage": "https://github.com/googleapis/gcs-resumable-upload#readme",
  "keywords": [
    "google",
    "gcloud",
    "storage",
    "gcs",
    "upload",
    "resumable"
  ],
  "license": "MIT",
  "main": "build/src/index.js",
  "maintainers": [
    {
      "name": "callmehiphop",
      "email": "callmehiphop@gmail.com"
    },
    {
      "name": "fenster",
      "email": "npm@fenster.name"
    },
    {
      "name": "google-cloud-admin",
      "email": "google-cloud@google.com"
    },
    {
      "name": "google-node-team",
      "email": "node-team-npm@google.com"
    },
    {
      "name": "google-wombot",
      "email": "node-team-npm+wombot@google.com"
    },
    {
      "name": "jdobry",
      "email": "jason.dobry@gmail.com"
    },
    {
      "name": "jgeewax",
      "email": "jj@geewax.org"
    },
    {
      "name": "justinbeckwith",
      "email": "justin.beckwith@gmail.com"
    },
    {
      "name": "ofrobots",
      "email": "ofrobots@google.com"
    },
    {
      "name": "stephenplusplus",
      "email": "stephenplusplusplus@gmail.com"
    }
  ],
  "name": "gcs-resumable-upload",
  "optionalDependencies": {},
  "readme": "# gcs-resumable-upload\n> Upload a file to Google Cloud Storage with built-in resumable behavior\n\n```sh\n$ npm install gcs-resumable-upload\n```\n```js\nconst {upload} = require('gcs-resumable-upload');\nconst fs = require('fs');\n\nfs.createReadStream('titanic.mov')\n  .pipe(upload({ bucket: 'legally-owned-movies', file: 'titanic.mov' }))\n  .on('finish', () => {\n    // Uploaded!\n  });\n```\n\nOr from the command line:\n\n```sh\n$ npm install -g gcs-resumable-upload\n$ cat titanic.mov | gcs-upload legally-owned-movies titanic.mov\n```\n\nIf somewhere during the operation, you lose your connection to the internet or your tough-guy brother slammed your laptop shut when he saw what you were uploading, the next time you try to upload to that file, it will resume automatically from where you left off.\n\n## How it works\n\nThis module stores a file using [ConfigStore](http://gitnpm.com/configstore) that is written to when you first start an upload. It is aliased by the file name you are uploading to and holds the first 16kb chunk of data* as well as the unique resumable upload URI. ([Resumable uploads are complicated](https://cloud.google.com/storage/docs/json_api/v1/how-tos/upload#resumable))\n\nIf your upload was interrupted, next time you run the code, we ask the API how much data it has already, then simply dump all of the data coming through the pipe that it already has.\n\nAfter the upload completes, the entry in the config file is removed. Done!\n\n\\* The first 16kb chunk is stored to validate if you are sending the same data when you resume the upload. If not, a new resumable upload is started with the new data.\n\n## Authentication\n\nOh, right. This module uses [google-auth-library](http://gitnpm.com/google-auth-library) and accepts all of the configuration that module does to strike up a connection as `config.authConfig`. See [`authConfig`](https://github.com/google/google-auth-library-nodejs/#choosing-the-correct-credential-type-automatically).\n\n## API\n\n### {upload} = require('gcs-resumable-upload')\n\n---\n\n#### upload(config)\n\n- Returns: [`Duplexify`](http://gitnpm.com/duplexify)\n\n<a name=\"config\"></a>\n##### config\n\n- Type: `object`\n\nConfiguration object.\n\n###### config.authClient\n\n- Type: [`GoogleAuth`](http://gitnpm.com/google-auth-library)\n- *Optional*\n\nIf you want to re-use an auth client from [google-auth-library](http://gitnpm.com/google-auth-library), pass an instance here.\n\n###### config.authConfig\n\n- Type: `object`\n- *Optional*\n\nSee [`authConfig`](https://github.com/google/google-auth-library-nodejs/#choosing-the-correct-credential-type-automatically).\n\n###### config.bucket\n\n- Type: `string`\n- **Required**\n\nThe name of the destination bucket.\n\n###### config.file\n\n- Type: `string`\n- **Required**\n\nThe name of the destination file.\n\n###### config.generation\n\n- Type: `number`\n- *Optional*\n\nThis will cause the upload to fail if the current generation of the remote object does not match the one provided here.\n\n###### config.key\n\n- Type: `string|buffer`\n- *Optional*\n\nA [customer-supplied encryption key](https://cloud.google.com/storage/docs/encryption#customer-supplied).\n\n###### config.kmsKeyName\n\n- Type: `string`\n- *Optional*\n\nResource name of the Cloud KMS key, of the form `projects/my-project/locations/global/keyRings/my-kr/cryptoKeys/my-key`, that will be used to encrypt the object. Overrides the object metadata's `kms_key_name` value, if any.\n\n###### config.metadata\n\n- Type: `object`\n- *Optional*\n\nAny metadata you wish to set on the object.\n\n###### *config.metadata.contentLength*\n\nSet the length of the file being uploaded.\n\n###### *config.metadata.contentType*\n\nSet the content type of the incoming data.\n\n###### config.offset\n\n- Type: `number`\n- *Optional*\n\nThe starting byte of the upload stream, for [resuming an interrupted upload](https://cloud.google.com/storage/docs/json_api/v1/how-tos/resumable-upload#resume-upload).\n\n###### config.origin\n\n- Type: `string`\n- *Optional*\n\nSet an Origin header when creating the resumable upload URI.\n\n###### config.predefinedAcl\n\n- Type: `string`\n- *Optional*\n\nApply a predefined set of access controls to the created file.\n\nAcceptable values are:\n\n  - **`authenticatedRead`** - Object owner gets `OWNER` access, and `allAuthenticatedUsers` get `READER` access.\n  - **`bucketOwnerFullControl`** - Object owner gets `OWNER` access, and project team owners get `OWNER` access.\n  - **`bucketOwnerRead`** - Object owner gets `OWNER` access, and project team owners get `READER` access.\n  - **`private`** - Object owner gets `OWNER` access.\n  - **`projectPrivate`** - Object owner gets `OWNER` access, and project team members get access according to their roles.\n  - **`publicRead`** - Object owner gets `OWNER` access, and `allUsers` get `READER` access.\n\n###### config.private\n\n- Type: `boolean`\n- *Optional*\n\nMake the uploaded file private. (Alias for `config.predefinedAcl = 'private'`)\n\n###### config.public\n\n- Type: `boolean`\n- *Optional*\n\nMake the uploaded file public. (Alias for `config.predefinedAcl = 'publicRead'`)\n\n###### config.uri\n\n- Type: `string`\n- *Optional*\n\nIf you already have a resumable URI from a previously-created resumable upload, just pass it in here and we'll use that.\n\n###### config.userProject\n\n- Type: `string`\n- *Optional*\n\nIf the bucket being accessed has `requesterPays` functionality enabled, this can be set to control which project is billed for the access of this file.\n\n--\n\n#### Events\n\n##### .on('error', function (err) {})\n\n###### err\n\n- Type: `Error`\n\nInvoked if the authorization failed, the request failed, or the file wasn't successfully uploaded.\n\n##### .on('response', function (response) {})\n\n###### resp\n\n- Type: `Object`\n\nThe [response object from Gaxios](https://github.com/JustinBeckwith/gaxios/blob/88a47e000625d8192689acac5c40c0b1e1d963a2/src/gaxios.ts#L197-L203).\n\n###### metadata\n\n- Type: `Object`\n\nThe file's new metadata.\n\n##### .on('finish', function () {})\n\nThe file was uploaded successfully.\n\n---\n\n### {createURI} = require('gcs-resumable-upload);\n\n#### createURI([config](#config), callback)\n\n##### callback(err, resumableURI)\n\n###### callback.err\n\n- Type: `Error`\n\nInvoked if the authorization failed or the request to start a resumable session failed.\n\n###### callback.resumableURI\n\n- Type: `String`\n\nThe resumable upload session URI.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/googleapis/gcs-resumable-upload.git"
  },
  "scripts": {
    "clean": "gts clean",
    "compile": "tsc -p .",
    "docs": "compodoc src/",
    "docs-test": "linkinator docs -r --skip www.googleapis.com",
    "fix": "gts fix",
    "lint": "gts check",
    "posttest": "npm run lint",
    "predocs-test": "npm run docs",
    "prepare": "npm run compile",
    "presystem-test": "npm run compile",
    "pretest": "npm run compile",
    "samples-test": "echo no samples 🤷‍♂️",
    "system-test": "mocha build/system-test --timeout 20000",
    "test": "nyc mocha build/test"
  },
  "types": "build/src/index.d.ts",
  "version": "1.0.0"
}
