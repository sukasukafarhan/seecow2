{
  "_args": [
    [
      {
        "raw": "gaxios@^1.2.1",
        "scope": null,
        "escapedName": "gaxios",
        "name": "gaxios",
        "rawSpec": "^1.2.1",
        "spec": ">=1.2.1 <2.0.0",
        "type": "range"
      },
      "/home/faruq/final-project-code/seecow/sensor_server/node_modules/google-auth-library"
    ]
  ],
  "_from": "gaxios@^1.2.1",
  "_hasShrinkwrap": false,
  "_id": "gaxios@1.8.2",
  "_location": "/gaxios",
  "_nodeVersion": "10.15.2",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/gaxios_1.8.2_1551972817575_0.832791334084136"
  },
  "_npmUser": {
    "name": "justinbeckwith",
    "email": "justin.beckwith@gmail.com"
  },
  "_npmVersion": "6.5.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "gaxios@^1.2.1",
    "scope": null,
    "escapedName": "gaxios",
    "name": "gaxios",
    "rawSpec": "^1.2.1",
    "spec": ">=1.2.1 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/gcp-metadata",
    "/gcs-resumable-upload",
    "/google-auth-library",
    "/gtoken"
  ],
  "_resolved": "https://registry.npmjs.org/gaxios/-/gaxios-1.8.2.tgz",
  "_shasum": "8bc29dab0f5e296cada2c9d3ebbd0857410df15f",
  "_shrinkwrap": null,
  "_spec": "gaxios@^1.2.1",
  "_where": "/home/faruq/final-project-code/seecow/sensor_server/node_modules/google-auth-library",
  "author": {
    "name": "Google, LLC"
  },
  "bugs": {
    "url": "https://github.com/JustinBeckwith/gaxios/issues"
  },
  "dependencies": {
    "abort-controller": "^2.0.2",
    "extend": "^3.0.2",
    "https-proxy-agent": "^2.2.1",
    "node-fetch": "^2.3.0"
  },
  "description": "A simple common HTTP client specifically for Google APIs and services.",
  "devDependencies": {
    "@commitlint/cli": "^7.5.2",
    "@commitlint/config-conventional": "^7.5.0",
    "@types/execa": "^0.9.0",
    "@types/express": "^4.16.1",
    "@types/extend": "^3.0.1",
    "@types/mocha": "^5.2.6",
    "@types/mv": "^2.1.0",
    "@types/ncp": "^2.0.1",
    "@types/nock": "^9.3.1",
    "@types/node": "^11.9.5",
    "@types/node-fetch": "^2.1.6",
    "@types/sinon": "^7.0.7",
    "@types/tmp": "0.0.34",
    "assert-rejects": "^1.0.0",
    "codecov": "^3.2.0",
    "execa": "^1.0.0",
    "express": "^4.16.4",
    "gts": "^0.9.0",
    "is-docker": "^1.1.0",
    "karma": "^4.0.0",
    "karma-chrome-launcher": "^2.2.0",
    "karma-coverage": "^1.1.2",
    "karma-firefox-launcher": "^1.1.0",
    "karma-mocha": "^1.3.0",
    "karma-remap-coverage": "^0.1.5",
    "karma-sourcemap-loader": "^0.3.7",
    "karma-webpack": "^3.0.5",
    "mocha": "^6.0.2",
    "mv": "^2.1.1",
    "ncp": "^2.0.0",
    "nock": "^10.0.6",
    "null-loader": "^0.1.1",
    "nyc": "^13.3.0",
    "puppeteer": "^1.12.2",
    "semantic-release": "^15.13.3",
    "semistandard": "^13.0.1",
    "sinon": "^7.2.5",
    "source-map-support": "^0.5.10",
    "tmp": "0.0.33",
    "ts-loader": "^5.3.3",
    "typescript": "~3.3.3333",
    "webpack": "^4.29.5",
    "webpack-cli": "^3.2.3"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-Mp6zmABg+0CxJA4b7DEWQ4ZWQzEaWxRNmHAcvCO+HU3dfoFTY925bdpZrTkLWPEtKjS9RBJKrJInzb+VtvAVYA==",
    "shasum": "8bc29dab0f5e296cada2c9d3ebbd0857410df15f",
    "tarball": "https://registry.npmjs.org/gaxios/-/gaxios-1.8.2.tgz",
    "fileCount": 18,
    "unpackedSize": 50917,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcgTnSCRA9TVsSAnZWagAAL3AP/jGVSfMY40zn5V7Z6qSE\nHkucUSNFEPwrs9CKZg8v1H2v55ic5ya0vs4OxWhw8pOzMFHSPF2wqikz/gLe\n/lIW2reHa5a+6OwapQoITqtqv3iKTTMbnKPEjQz4XSVX5CQYUCFH8Oqidbdm\nlGd/JqFPkDPzzX+MHibLDWu1lf1Omjw4bqWU0yoPe/OEAcClGnHZxf494dj9\nYc32mtYjGmEE+BvtZoPrVAaFbtQJdrv/oIwhVhIKFjFLkNQfK76hE1HjTPEr\nZEwnuZHMSKEQBfu46NEpq3T6yEPR5Cu2yKgnyFbz4snRzgcL9Wk78yki3zNf\nJEOp4f8XJlHlGD/SRhA7d4+bNE3hnKB1zxE8f0Rew7vYrdWG7p/BpXOVWDtO\nScud/2XgZXJ1aROp8CstKFdr1ov2XGuF2KJals+gnYw2ANh+wesLbVG5uFox\n0oaxSY5iahqKnXfiAVqCCiAnRqQLY2Z3ZLTUHEFp/enYMtp5fn+kttc8W5qt\n2HdiqORKoCWEGKJR405rWnb1mtwTlpEP51WF+LMPxOvmTlUQ+tXNDA8P6cDD\nasFzBpOengEwFcOhNE4hiSSpUwGIMkHHaNDuQMYc07WcsucoPXaFn12yRN9V\nIQEI4DVZQOb3q+2FT85W1iALD6Sg+rXl4pW5L/gr1j1j8IHMYBB7CfRqT38l\nMXkD\r\n=e3Y/\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "files": [
    "build/src"
  ],
  "gitHead": "7954a2860aa24f95567bd60de24d1061cc2cbca8",
  "homepage": "https://github.com/JustinBeckwith/gaxios#readme",
  "keywords": [
    "google"
  ],
  "license": "Apache-2.0",
  "main": "build/src/index.js",
  "maintainers": [
    {
      "name": "justinbeckwith",
      "email": "justin.beckwith@gmail.com"
    }
  ],
  "name": "gaxios",
  "nyc": {
    "exclude": [
      "build/test"
    ]
  },
  "optionalDependencies": {},
  "readme": "# gaxios\n\n[![npm version](https://img.shields.io/npm/v/gaxios.svg)](https://www.npmjs.org/package/gaxios)\n[![Build Status](https://api.cirrus-ci.com/github/JustinBeckwith/gaxios.svg)](https://cirrus-ci.com/github/JustinBeckwith/gaxios)\n[![codecov](https://codecov.io/gh/JustinBeckwith/gaxios/branch/master/graph/badge.svg)](https://codecov.io/gh/JustinBeckwith/gaxios)\n[![semantic-release](https://img.shields.io/badge/%20%20%F0%9F%93%A6%F0%9F%9A%80-semantic--release-e10079.svg)](https://github.com/semantic-release/semantic-release)\n\n> An HTTP request client that provides an `axios` like interfance over top of `node-fetch`.  Only really useful if you're trying to migrate from axios to the fetch.\n\n## Install\n```sh\n$ npm install gaxios\n```\n\n## Example\n\n```js\nconst {request} = require('gaxios');\nconst res = await request({\n  url: 'https://www.googleapis.com/discovery/v1/apis/'\n});\n```\n\n## Setting Defaults\nGaxios supports setting default properties both on the default instance, and on additional instances. This is often useful when making many requests to the same domain with the same base settings.  For example:\n\n```js\nconst gaxios = require('gaxios');\ngaxios.instance.defaults = {\n  baseURL: 'https://example.com'\n  headers: {\n    Authorization: 'SOME_TOKEN'\n  }\n}\ngaxios.request({url: '/data'}).then(...);\n```\n\n## Request Options\n\n```js\n{\n  // The url to which the request should be sent.  Required.\n  url: string,\n\n  // The HTTP method to use for the request.  Defaults to `GET`.\n  method: 'GET',\n\n  // The base Url to use for the request. Prepended to the `url` property above.\n  baseURL: 'https://example.com';\n\n  // The HTTP methods to be sent with the request.\n  headers: { 'some': 'header' },\n\n  // The data to base64 encode and send in the body of the request.\n  data: {\n    some: 'data'\n  },\n\n  // The max size of the http response content in bytes allowed.\n  // Defaults to `0`, which is the same as unset.\n  maxContentLength: 2000,\n\n  // The max number of HTTP redirects to follow.\n  // Defaults to 100.\n  maxRedirects: 100,\n\n  // The querystring parameters that will be encoded using `qs` and\n  // appended to the url\n  params: {\n    querystring: 'parameters'\n  },\n\n  // By default, we use the `querystring` package in node core to serialize\n  // querystring parameters.  You can override that and provide your\n  // own implementation.\n  paramsSerializer: (params) => {\n    return qs.stringify(params);\n  },\n\n  // The timeout for the HTTP request. Defaults to 0.\n  timeout: 1000,\n\n  // Optional method to override making the actual HTTP request. Useful\n  // for writing tests.\n  adapter?: (options) => {\n    return {\n      data: 'your data'\n    }\n  };\n\n  // The expected return type of the request.  Options are:\n  // json | stream | blob | arraybuffer | text\n  // Defaults to `json`.\n  responseType: 'json',\n\n  // The node.js http agent to use for the request.\n  agent: someHttpsAgent,\n\n  // Custom function to determine if the response is valid based on the\n  // status code.  Defaults to (>= 200 && < 300)\n  validateStatus: (status: number) => true,\n\n  // Configuration for retrying of requests.\n  retryConfig: {\n    // The number of times to retry the request.  Defaults to 3.\n    retry?: number;\n\n    // The number of retries already attempted.\n    currentRetryAttempt?: number;\n\n    // The amount of time to initially delay the retry.  Defaults to 100.\n    retryDelay?: number;\n\n    // The HTTP Methods that will be automatically retried.\n    // Defaults to ['GET','PUT','HEAD','OPTIONS','DELETE']\n    httpMethodsToRetry?: string[];\n\n    // The HTTP response status codes that will automatically be retried.\n    // Defaults to: [[100, 199], [429, 429], [500, 599]]\n    statusCodesToRetry?: number[][];\n\n    // Function to invoke when a retry attempt is made.\n    onRetryAttempt?: (err: GaxiosError) => void;\n\n    // Function to invoke which determines if you should retry\n    shouldRetry?: (err: GaxiosError) => boolean;\n\n    // When there is no response, the number of retries to attempt. Defaults to 2.\n    noResponseRetries?: number;\n  },\n\n  // Enables default configuration for retries.\n  retry: boolean,\n\n  // Cancelling a request requires the `abort-controller` library.\n  // See https://github.com/bitinn/node-fetch#request-cancellation-with-abortsignal\n  signal?: AbortSignal\n}\n```\n\n## License\n[Apache-2.0](LICENSE)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/JustinBeckwith/gaxios.git"
  },
  "scripts": {
    "browser-test": "node build/browser-test/browser-test-runner.js",
    "clean": "gts clean",
    "codecov": "nyc report --reporter=json && codecov -f coverage/*.json",
    "commitlint": "git log -1 --pretty=%B | commitlint",
    "compile": "tsc -p . && npm run fix",
    "fix": "gts fix && semistandard --fix",
    "lint": "semistandard && gts check",
    "prebrowser-test": "npm run compile",
    "prepare": "npm run compile",
    "presystem-test": "npm run compile",
    "pretest": "npm run compile",
    "samples-test": "cd samples/ && npm link ../ && npm test && cd ../",
    "system-test": "mocha build/system-test --timeout 40000",
    "test": "nyc mocha build/test",
    "webpack": "webpack"
  },
  "types": "build/src/index.d.ts",
  "version": "1.8.2"
}
